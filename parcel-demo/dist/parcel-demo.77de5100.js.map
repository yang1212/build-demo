{"version":3,"sources":["index.ts"],"names":[],"mappings":"AAAA;;AACA,SAAS,KAAT,CAAkB,GAAlB,EAA0B;AACxB,MAAI,CAAC,GAAG,GAAG,CAAC,MAAJ,GAAa,CAArB;AACA,MAAI,IAAJ;;AACA,SAAO,CAAC,GAAG,CAAX,EAAc;AACZ,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,CAApB,EAAuB,CAAC,EAAxB,EAA4B;AAC1B,UAAI,GAAG,CAAC,CAAD,CAAH,GAAS,GAAG,CAAC,CAAC,GAAG,CAAL,CAAhB,EAAyB;AACvB,QAAA,IAAI,GAAG,GAAG,CAAC,CAAD,CAAV;AACA,QAAA,GAAG,CAAC,CAAD,CAAH,GAAS,GAAG,CAAC,CAAC,GAAG,CAAL,CAAZ;AACA,QAAA,GAAG,CAAC,CAAC,GAAG,CAAL,CAAH,GAAa,IAAb;AACD;AACF;;AACD,IAAA,CAAC;AACF;;AACD,SAAO,GAAP;AACD,EAED;AACA;;;AAEA,SAAS,KAAT,CAAkB,GAAlB,EAA0B;AACxB,MAAI,GAAG,CAAC,MAAJ,IAAc,CAAlB,EAAqB;AAAE,WAAO,GAAP;AAAY;;AACnC,MAAI,GAAG,GAAG,GAAG,CAAC,IAAI,CAAC,KAAL,CAAW,GAAG,CAAC,MAAJ,GAAa,CAAxB,CAAD,CAAb;AACA,MAAI,OAAO,GAAG,EAAd;AACA,MAAI,QAAQ,GAAG,EAAf;AACA,EAAA,GAAG,CAAC,MAAJ,CAAW,IAAI,CAAC,KAAL,CAAW,GAAG,CAAC,MAAJ,GAAa,CAAxB,CAAX,EAAuC,CAAvC;;AACA,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,GAAG,CAAC,MAAJ,GAAa,CAAjC,EAAoC,CAAC,EAArC,EAAyC;AACvC,QAAI,GAAG,GAAG,GAAG,CAAC,CAAD,CAAb,EAAkB;AAChB,MAAA,OAAO,CAAC,IAAR,CAAa,GAAG,CAAC,CAAD,CAAhB;AACD,KAFD,MAEO;AACL,MAAA,QAAQ,CAAC,IAAT,CAAc,GAAG,CAAC,CAAD,CAAjB;AACD;AACF;;AACD,SAAO,KAAK,CAAC,OAAD,CAAL,CAAe,MAAf,CAAsB,GAAtB,EAA2B,KAAK,CAAC,QAAD,CAAhC,CAAP;AACD;;AAED,SAAS,KAAT,CAAkB,GAAlB,EAA0B;AACxB,OAAI,IAAI,CAAC,GAAG,CAAZ,EAAe,CAAC,GAAG,GAAG,CAAC,MAAvB,EAA+B,CAAC,EAAhC,EAAoC;AAClC,QAAI,GAAG,GAAG,GAAG,CAAC,CAAD,CAAb;AACA,QAAI,UAAU,GAAG,CAAC,GAAG,CAArB,CAFkC,CAEX;;AACvB,WAAO,GAAG,CAAC,UAAD,CAAH,GAAkB,GAAlB,IAAyB,UAAU,GAAG,CAAC,CAA9C,EAAiD;AAC/C,MAAA,GAAG,CAAC,UAAU,GAAG,CAAd,CAAH,GAAsB,GAAG,CAAC,UAAD,CAAzB;AACA,MAAA,UAAU;AACX;;AACD,IAAA,GAAG,CAAC,UAAU,GAAG,CAAd,CAAH,GAAsB,GAAtB,CAPkC,CAOR;AAC3B;;AACD,SAAO,GAAP;AACD;;AAED,KAAK,CAAC,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAAD,CAAL","file":"parcel-demo.77de5100.js","sourceRoot":"..","sourcesContent":["\"use strict\"\r\nfunction sortM<T>(arr: T[]):T[]{\r\n  let i = arr.length - 1\r\n  let temp\r\n  while (i > 0) {\r\n    for (let j = 0; j < i; j++) {\r\n      if (arr[j] > arr[j + 1]) {\r\n        temp = arr[j]\r\n        arr[j] = arr[j + 1]\r\n        arr[j + 1] = temp\r\n      }\r\n    }\r\n    i--\r\n  }\r\n  return arr\r\n}\r\n\r\n// n个数，外层需要经过 n - 1轮\r\n// 内层需两两比较， 一圈过后，可确认一个最值。 比较次数为： 剩下未排序数个数 - 1,以此循环。\r\n\r\nfunction sortK<T>(arr: T[]):T[] {\r\n  if (arr.length <= 1) { return arr }\r\n  let tag = arr[Math.floor(arr.length / 2)]\r\n  let leftArr = []\r\n  let rightArr = []\r\n  arr.splice(Math.floor(arr.length / 2), 1)\r\n  for (let i = 0; i < arr.length - 1; i++) {\r\n    if (tag > arr[i]) {\r\n      leftArr.push(arr[i])\r\n    } else {\r\n      rightArr.push(arr[i])\r\n    }\r\n  }\r\n  return sortK(leftArr).concat(tag, sortK(rightArr))\r\n}\r\n\r\nfunction sortC<T>(arr: T[]):T[] {\r\n  for(let j = 1; j < arr.length; j++) {\r\n    let key = arr[j]\r\n    let orderlyNum = j - 1 // 有序数组下标最大值即为key值前一项\r\n    while (arr[orderlyNum] > key && orderlyNum > -1) {\r\n      arr[orderlyNum + 1] = arr[orderlyNum]\r\n      orderlyNum--\r\n    }\r\n    arr[orderlyNum + 1] = key //  此步是用于完全有序的数组\r\n  }\r\n  return arr\r\n}\r\n\r\nsortC([2, 3, 1, 5])\r\n\r\n\r\n// this实际上是函数被调用时发生的绑定\r\n\r\n// 1) 不带任何修饰的函数调用。（严格模式下： 全局环境this绑定到undefined)\r\n\r\n// 2) 隐式绑定(隐式绑定丢失)\r\n\r\n// 3) 硬绑定（call, apply)\r\n\r\n// 4) new绑定"]}